<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pippin&#39;s Fairy Land</title>
  
  <subtitle>一些有意思的东西</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-09-08T15:50:37.407Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Pippin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我回来了</title>
    <link href="http://yoursite.com/2021/09/08/%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86/"/>
    <id>http://yoursite.com/2021/09/08/%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86/</id>
    <published>2021-09-08T15:48:14.269Z</published>
    <updated>2021-09-08T15:50:37.407Z</updated>
    
    <content type="html"><![CDATA[<p>时隔一年。我终于在神秘力量———国元——的驱动下，把我的专属小破站搞回来了。</p><p>主要是我换了电脑之后，新电脑就没有配置Blog的地方了（也忘记了hexo是个啥玩意儿了），然后懒惰就占据我的电脑。</p><p>这一周 我在百忙之中（忙于sb工作和驰骋于峡谷）每天抽了点零星时间，跟着教程一点点🤏🏻学习如何配置部署Hexo。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时隔一年。我终于在神秘力量———国元——的驱动下，把我的专属小破站搞回来了。&lt;/p&gt;
&lt;p&gt;主要是我换了电脑之后，新电脑就没有配置Blog的地方了（也忘记了hexo是个啥玩意儿了），然后懒惰就占据我的电脑。&lt;/p&gt;
&lt;p&gt;这一周 我在百忙之中（忙于sb工作和驰骋于峡谷）每天</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>超简单小程序助力“相亲“事业</title>
    <link href="http://yoursite.com/2020/02/09/%E3%80%8E%E5%A5%BD%E6%9C%89%E7%BC%98%E3%80%8F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93&amp;%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/02/09/%E3%80%8E%E5%A5%BD%E6%9C%89%E7%BC%98%E3%80%8F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93&amp;%E9%97%AE%E9%A2%98/</id>
    <published>2020-02-09T06:46:25.000Z</published>
    <updated>2020-03-18T15:08:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>为热心朋友的红娘副业，做一点微小的贡献。小程序目前已经上线，名字：群里有事儿吧。主要功能很简单，用户填写信息提交，然后展示在首页。</p><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><ol><li>收集单身男女的用户信息</li><li>展示单身男女部分信息</li></ol><p>主要功能很简单，就是表单提交，然后再部分展示表单里的功能。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li>小程序云开发</li><li>小程序原生框架</li><li>iViewUI组件库</li></ol><h2 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a>未解决的问题</h2><h3 id="1-组件样式修改"><a href="#1-组件样式修改" class="headerlink" title="1. 组件样式修改"></a>1. 组件样式修改</h3><p>我用了iViewUI的radio组件，</p><p><img src="https://s1.ax1x.com/2020/03/13/8mOGAH.jpg" alt="8mOGAH.jpg"></p><p>想修改这里的文字大小，发现就很难修改，及时用了官方的自定义i-class名，还是不行，包括vant组件库也存在这样的问题</p><p><img src="https://s1.ax1x.com/2020/03/13/8mOMjK.png" alt="8mOMjK.png"></p><p>后来我直接去组件源文件里修了，但这样并不好，所以不知道该怎么办</p><h3 id="2-键盘不收回"><a href="#2-键盘不收回" class="headerlink" title="2. 键盘不收回"></a>2. 键盘不收回</h3><p>表单每个按键输入都会触发键盘隐藏，需要再次点击输入框激活才可再次输入。感觉体验很不好，但没找到解决办法。</p><h3 id="3-单选框选项放在一行"><a href="#3-单选框选项放在一行" class="headerlink" title="3. 单选框选项放在一行"></a>3. 单选框选项放在一行</h3><p>radio组件，默认选项是在两行，放在一行是否会影响实现效果？</p><h3 id="4-从表单跳转到其他页面时提示一下"><a href="#4-从表单跳转到其他页面时提示一下" class="headerlink" title="4. 从表单跳转到其他页面时提示一下"></a>4. 从表单跳转到其他页面时提示一下</h3><p>当时想用onUnload()页面卸载时触发，但都是跳转之后才提示，无法在跳转之前提示。</p><h2 id="处理的不太好的地方"><a href="#处理的不太好的地方" class="headerlink" title="处理的不太好的地方"></a>处理的不太好的地方</h2><h3 id="1-分页操作"><a href="#1-分页操作" class="headerlink" title="1. 分页操作"></a>1. 分页操作</h3><p>因为每次只能取20条数据，所以要分次来取数据。我用的方法很麻烦。</p><ol><li>先取15个数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = wx.cloud.database()</span><br><span class="line"><span class="keyword">const</span> info = db.collection(<span class="string">'info'</span>)</span><br><span class="line"><span class="comment">// 获取数据总数</span></span><br><span class="line">info.count().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    totalCount: res.total</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">try</span>&#123; </span><br><span class="line">  info.limit(<span class="number">15</span>)</span><br><span class="line">      .orderBy(<span class="string">'_id_'</span>, <span class="string">'asc'</span>)</span><br><span class="line">      .get()</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        info:res.data</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">catch</span>(err)&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err)</span><br><span class="line">  wx.hideNavigationBarLoading();<span class="comment">//hide loading </span></span><br><span class="line">  wx.stopPullDownRefresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>到底之后再取下一组（10）个数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">onReachBottom:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> db = wx.cloud.database()</span><br><span class="line">  <span class="keyword">const</span> info = db.collection(<span class="string">'info'</span>)</span><br><span class="line">  <span class="comment">//临时数组存放数据</span></span><br><span class="line">  <span class="keyword">let</span> temp = [];</span><br><span class="line">  <span class="keyword">let</span> length = <span class="keyword">this</span>.data.info.length</span><br><span class="line">  <span class="keyword">if</span> (length &lt; <span class="keyword">this</span>.data.totalCount) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      info.skip(length)</span><br><span class="line">            .limit(<span class="number">10</span>)</span><br><span class="line">            .orderBy(<span class="string">'_id_'</span>, <span class="string">'asc'</span>)</span><br><span class="line">            .get().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.data.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.data.length; i++) &#123;</span><br><span class="line">              temp.push(res.data[i])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">              info:<span class="keyword">this</span>.data.info.concat(temp)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            wx.showToast(&#123;</span><br><span class="line">              title:<span class="string">"没有更多啦"</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">      title:<span class="string">"没有更多啦"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>我猜应该有更简单的……方法把？</p><h3 id="2-表单数据添加"><a href="#2-表单数据添加" class="headerlink" title="2. 表单数据添加"></a>2. 表单数据添加</h3><p>我把每个input都放在一个list渲染了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"form_section"</span><span class="attr">wx:for</span>=<span class="string">"&#123;&#123;list&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"form_text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"form_title"</span><span class="attr">style</span>=<span class="string">"display:inline;"</span>&gt;</span>&#123;&#123;item.label&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>        <span class="attr">class</span>=<span class="string">"required"</span><span class="attr">style</span>=<span class="string">"display:inline;"</span><span class="attr">wx:if</span>=<span class="string">"&#123;&#123;item.required&#125;&#125;"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"form_input"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">bindinput</span>=<span class="string">"bindKeyInput"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">"&#123;&#123;item.placeholder&#125;&#125;"</span><span class="attr">placeholder-style</span>=<span class="string">"color:#A9A9A9;line-height:1;min-height: 1;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"&#123;&#123;item.label&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/13/8mO3He.jpg" alt="8mO3He.jpg"></p><p>然而想把用户填写的信息和标签一一对应上，我用了一个很蠢的方法，各种if的嵌套。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(label==<span class="keyword">this</span>.data.list[<span class="number">0</span>].label)&#123;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    name:event.detail.value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(label==<span class="keyword">this</span>.data.list[<span class="number">1</span>].label)&#123;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    year:event.detail.value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(label==<span class="keyword">this</span>.data.list[<span class="number">2</span>].label)&#123;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    high:event.detail.value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(label==<span class="keyword">this</span>.data.list[<span class="number">3</span>].label)&#123;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    school:event.detail.value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>list列表里面就是我在后台录入的：“身高、学历、工作单位”这些标签。</p><h3 id="3-表单选项必填"><a href="#3-表单选项必填" class="headerlink" title="3. 表单选项必填"></a>3. 表单选项必填</h3><p>因为表单里有些选项是要设置必填的，所以我也用了一个长串来判断必填的选项是否空缺</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(this.data.name!&#x3D;&#x3D;undefined&amp;&amp;this.data.current!&#x3D;&#x3D;undefined&amp;&amp;this.data.high!&#x3D;&#x3D;undefined&amp;&amp;this.data.year!&#x3D;&#x3D;undefined&amp;&amp;this.data.company!&#x3D;&#x3D;undefined&amp;&amp;this.data.recommend!&#x3D;&#x3D;undefined)</span><br></pre></td></tr></table></figure><h3 id="4-用户填的每条信息自动加上数字序号"><a href="#4-用户填的每条信息自动加上数字序号" class="headerlink" title="4. 用户填的每条信息自动加上数字序号"></a>4. 用户填的每条信息自动加上数字序号</h3><p>我用的方法是在提交信息前计算目前这个库里目前已经有的数量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info.count().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    count:res.total</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后count+1就是这条用户的id序号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.data.id= <span class="keyword">this</span>.data.count+<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="5-页面信息呈现的时候根据性别变卡片底色-男性符号"><a href="#5-页面信息呈现的时候根据性别变卡片底色-男性符号" class="headerlink" title="5. 页面信息呈现的时候根据性别变卡片底色+男性符号"></a>5. 页面信息呈现的时候根据性别变卡片底色+男性符号</h3><p>我用的方法也比较蠢，就是在用户选择性别的时候，给它自动加一条颜色数据和Icon数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">handleSexChange(&#123; detail = &#123;&#125; &#125;) &#123;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    current_sex: detail.value</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(detail.value===<span class="string">"女孩"</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      color:<span class="string">'rgba(255,126,167,3)'</span>,</span><br><span class="line">      icon:<span class="string">'/images/female.png'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      color:<span class="string">'rgba(125,182,255,1)'</span>,</span><br><span class="line">      icon:<span class="string">'/images/male.png'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样最后呈现出来的就是这个样子：</p><p><img src="https://s1.ax1x.com/2020/03/13/8mOKc6.png" alt="8mOKc6.png"></p><p>然后上传到数据库的时候，就包含了color和Icon，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  name: <span class="keyword">this</span>.data.name,</span><br><span class="line">  high: <span class="keyword">this</span>.data.high,</span><br><span class="line">  year: <span class="keyword">this</span>.data.year,</span><br><span class="line">  child: <span class="keyword">this</span>.data.current_child,</span><br><span class="line">  company: <span class="keyword">this</span>.data.company,</span><br><span class="line">  <span class="built_in">require</span>: <span class="keyword">this</span>.data.require,</span><br><span class="line">  current:<span class="keyword">this</span>.data.current_sex,</span><br><span class="line">  recommend:<span class="keyword">this</span>.data.recommend,</span><br><span class="line">  color:<span class="keyword">this</span>.data.color,</span><br><span class="line">  icon:<span class="keyword">this</span>.data.icon,</span><br><span class="line">  _id_:<span class="keyword">this</span>.data.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前想到的就是这5个。哦对，希望自己早日用上云函数……</p><h2 id="其他学到的小知识点"><a href="#其他学到的小知识点" class="headerlink" title="其他学到的小知识点"></a>其他学到的小知识点</h2><ol><li>某一行元素加了width:100% 页面会各种晃动</li><li>数据放在onShow里面去取的话，再重新进小程序（不退出微信），又会从头开始刷新，但放在onLoad里就不会。</li><li>在github新建repositores 时候千万不要自作主张整个readme 不然就会无法Push。</li><li>onShareAppMessage 不支持异步操作</li><li>用onPullDownRefresh的时候记得在json里写上</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"enablePullDownRefresh": true,</span><br></pre></td></tr></table></figure><ol start="6"><li>display:inline 是把子元素变成行内元素，而不是放在父元素上。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;为热心朋友的红娘副业，做一点微小的贡献。小程序目前已经上线，名字：群里有事儿吧。主要功能很简单，用户填写信息提交，然后展示在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>不奇怪的小知识增加了——关于音乐播放小程序</title>
    <link href="http://yoursite.com/2019/11/09/%E3%80%8E%E6%97%A0%E5%8F%A3%E7%82%B9%E6%B3%A2%E3%80%8F%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/11/09/%E3%80%8E%E6%97%A0%E5%8F%A3%E7%82%B9%E6%B3%A2%E3%80%8F%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/</id>
    <published>2019-11-09T06:46:25.000Z</published>
    <updated>2020-03-18T15:08:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>2月无口的开发进度还是比较慢的，前期想练习父子组件传递，结果一个简单的页面写了很多莫名其妙的组件……最后又重新整合在一起了。</p><p>中间也出现了一些小问题，我把纠结之后，想到的解决方法列在这里。</p><h3 id="给按钮加标识"><a href="#给按钮加标识" class="headerlink" title="给按钮加标识"></a>给按钮加标识</h3><p>同一个页面，点某一个按钮播放，其他按钮的状态都跟着变</p><p>我后来把播放按钮直接提到首页，结果点第一首歌的播放按钮，页面上其他歌曲的按钮状态也跟者变。这是因为我之前循环的时候按钮都是由一个变量showPlay来统一控制状态。</p><p>于是我就想到给按钮加一个index标识。列表循环的时候每个item都有单独的按钮状态。但……需要你在后台数据库给这个字段加上默认值TRUE OR FALSE。（隐隐觉得这种处理方式有问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> @<span class="attr">click</span>=<span class="string">"playMusic(index)"</span> <span class="attr">:src</span>=<span class="string">"item.showPlay?iconPlay:iconPause"</span><span class="attr">class</span>=<span class="string">"play-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span>`</span><br></pre></td></tr></table></figure><p>触发播放事件，只有当前index的playIcon变量才会发生变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.index=index</span><br><span class="line"><span class="keyword">const</span> audio = wx.getBackgroundAudioManager();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.list[index].showPlay)&#123;</span><br><span class="line">  audio.src=<span class="keyword">this</span>.list[index].url;</span><br><span class="line">  audio.autoplay = <span class="literal">true</span>;</span><br><span class="line">  audio.title=<span class="keyword">this</span>.list[index].abstract</span><br><span class="line">  <span class="keyword">this</span>.list[index].showPlay=<span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    audio.pause();</span><br><span class="line">    <span class="keyword">this</span>.list[index].showPlay=<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数-常量"><a href="#参数-常量" class="headerlink" title="参数+常量"></a>参数+常量</h3><p>之前用很复杂的方式去写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="tag">&lt;<span class="name">image</span> @<span class="attr">click</span>=<span class="string">"playMusic(index)"</span> <span class="attr">:src</span>=<span class="string">"'/static/'+item.showPlay?'play-icon.png':'stop-icon.png'"</span><span class="attr">class</span>=<span class="string">"play-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span>`</span><br></pre></td></tr></table></figure><p>后来把常量彻底放在后面，参数放在最前面，然后地址绑定在DATA里，就显得简洁很多了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> @<span class="attr">click</span>=<span class="string">"playMusic(index)"</span> <span class="attr">:src</span>=<span class="string">"item.showPlay?iconPlay:iconPause"</span><span class="attr">class</span>=<span class="string">"play-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    radius:<span class="string">"50%"</span>,</span><br><span class="line">    list:[],</span><br><span class="line">    index:<span class="string">''</span>,</span><br><span class="line">    iconPause:<span class="string">'../../static/pause.png'</span>,</span><br><span class="line">    iconPlay:<span class="string">'../../static/play.png'</span>,</span><br><span class="line">    play: <span class="literal">false</span>,</span><br><span class="line">    pause: <span class="literal">false</span>,</span><br><span class="line">    stop: <span class="literal">true</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><p>backgroundImage 接网络图片格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:style="&#123;backgroundImage:'url(' + item.img + ')'&#125;`</span><br></pre></td></tr></table></figure></li><li><p>通过:id=index来给每个点击增加index。当然也可以通过给click传入index参数。<code>@click=&quot;playMusic(index)&quot;</code></p></li><li><p>不加autoplay就没法儿播放</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innerAudioContext.autoplay = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li><li><p>学到了一个高级函数</p></li></ol><p>some() ：<br>The some() method checks if any of the elements in an array pass a test (provided as a function). … If it finds an array element where the function returns a true value, some() returns true (and does not check the remaining values) Otherwise it returns false.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2月无口的开发进度还是比较慢的，前期想练习父子组件传递，结果一个简单的页面写了很多莫名其妙的组件……最后又重新整合在一起了。&lt;/p&gt;
&lt;p&gt;中间也出现了一些小问题，我把纠结之后，想到的解决方法列在这里。&lt;/p&gt;
&lt;h3 id=&quot;给按钮加标识&quot;&gt;&lt;a href=&quot;#给按钮加标</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>来啊，我们聊聊 Object</title>
    <link href="http://yoursite.com/2019/09/29/%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8Object/"/>
    <id>http://yoursite.com/2019/09/29/%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8Object/</id>
    <published>2019-09-29T06:46:25.000Z</published>
    <updated>2020-03-18T15:08:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>看OReilly版的JavaScript权威指南，感觉特别累╭(╯3╰)╮然后我在Youtube上找了个视频《Programming with Mosh》，通俗易懂多了。下面是主要是来自视频的学习笔记。</p><h2 id="4-Pillars-of-Object-oriented-Programing"><a href="#4-Pillars-of-Object-oriented-Programing" class="headerlink" title="4 Pillars of Object-oriented Programing"></a>4 Pillars of Object-oriented Programing</h2><ol><li><em>Encapsulation</em>：翻译成中文就是封装性。如果和Procedural Programming做比较的话，前者是各种函数和变量堆积，杂乱无章。Objected-Oriented Programming 则是把函数和变量各自整理到一块儿，对于收纳癖来说，实在和他对应的变量就是一个unit. </li></ol><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/1.png" alt="1"></p><p>而函数被称为Method，变量（参数）则成为Property.</p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/2.png" alt="2"></p><p>如果用一辆小汽车来比喻那就是：车的原材料、模型、颜色就是车的property，而开动、刹车、行驶就是这辆小车的Method</p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/3.png" alt="3"></p><p>下面用真正的编程环境来对比Procedure Programming v.s OOP</p><p>PP：要先定义变量，然后把这些变量作为参数带入到函数里，很繁琐很麻烦</p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/4.png" alt="4"></p><p>OOP，则把这一切封装在一起：</p><p> <img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/5.png" alt="5"></p><ol start="2"><li>Abstract: 用作者的话来说Abstract就是把用简单的形式表达复杂的内核，让整个编程过程简单而优雅。</li></ol><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/6.png" alt="6"></p><ol start="3"><li>Inheritance：可继承性。老子有的，孩子自然也有。孩子不需要从头开始积累。</li></ol><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/7.png" alt="7"></p><p>额其实这个示意图没有完全看懂。html的每个标签从上到下，也都能用一套object解决咯？求例子🌰</p><ol start="4"><li>Polymorphism:</li></ol><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/8.png" alt="8"></p><p>还是这个图👇!</p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/9.png" alt="9"></p><p>如果每个element 都需要有不同的render情况，如果用switch的话，就会出现很繁琐的步骤：</p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/10.png" alt="10"></p><p>但是呢，我们把render 抽象成一个method那每个element不都可以用在自己里面了，而不需要用繁琐的switch. </p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/11.png" alt="11"></p><p>达到一行代替n行的效果</p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/12.png" alt="12"></p><p>总结下OOP有以下四大好处：</p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/13.png" alt="13"></p><h2 id="Fundamental-Concepts-of-Objects"><a href="#Fundamental-Concepts-of-Objects" class="headerlink" title="Fundamental Concepts of Objects:"></a>Fundamental Concepts of Objects:</h2><h3 id="creating-objects"><a href="#creating-objects" class="headerlink" title="creating objects:"></a>creating objects:</h3><p>方法一：using object syntax: { }<br>object is actually a collection of key value pairs </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const circle&#x3D;&#123;</span><br><span class="line">radius:1,</span><br><span class="line">location:&#123;</span><br><span class="line">x:1,</span><br><span class="line">y:1</span><br><span class="line">&#125;</span><br><span class="line">draw:function()&#123;</span><br><span class="line">console.log(&#39;draw&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre><code>* draw: method —&gt; ::define logic:: * radius/location: property —&gt; ::hold values:: </code></pre><p>access circle objects members using the dot notation<br><code>circle.draw();</code></p><p>方法二：factories and constructors(easy to duplicate) 。 比如一个姓名组合，当你需要加入1000个员工的姓名组合时候，方法一就不适用了。</p><blockquote><p>behaviors: if object has one or more methods   </p></blockquote><p><em>Factory Function</em>: </p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/14.png" alt="14"></p><p>想要创造新的object，只需要call这个function:</p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/15.png" alt="15"></p><p><em>Constructors Function:</em></p><ul><li>function name 首字母大写</li><li>用this来set properties | this: a reference to the object that is executing  this piece of code</li></ul><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/16.png" alt="16"></p><ul><li>new operator will <ul><li>create an empty object,</li><li>“this”will point to that object though this by default point to global/window object</li><li>automatically return statement in constructor function</li></ul></li></ul><blockquote><p>factory vs constructor: 有return的就是factory function  </p></blockquote><p><em>constructor</em> </p><ul><li>每个object都有一个constructor, references the function that was used to construct/create that object<br><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/17.png" alt="17"></li></ul><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/18.png" alt="18"></p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/19.png" alt="19"></p><p>当你用factory的方式创造object 的时候，新出现的object 会出现built-in constructor: Object</p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/20.png" alt="20"></p><p>other build-in constructor:<br><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/21.png" alt="21"></p><p>functions are object<br><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/22.png" alt="22"></p><p>👆本质上就等于👇：<br><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/23.png" alt="23"></p><p>new 本质就是一个call function<br><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/24.png" alt="24"></p><ul><li>primitives and reference types</li></ul><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/25.png" alt="25"></p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/26.png" alt="26"></p><p>primitives types are independent </p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/27.png" alt="27"></p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/28.png" alt="28"></p><p>object value的储存方式 is not stored in this variables, but stored in somewhere else. and the address of that memory is stored inside that variable.  so we copy reference or address not value. </p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/29.png" alt="29"></p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/30.png" alt="30"></p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/31.png" alt="31"></p><p>number++ 和number是different primitive。</p><p>那么如果是用obj来表示10呢。parameter will point to the same object we refer  to. </p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/32.png" alt="32"></p><ul><li>adding properties </li></ul><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/33.png" alt="33"></p><p>另一种notation的方法是bracket notation。尤其是当你不确定property的具体name或者你的name其实不是valid的变量名时。</p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/34.png" alt="34"></p><ul><li><p>delete property<br>delete object.property or object[‘ ‘] </p></li><li><p>enumerate properties: for in ( if has a given property) 遍历所有members</p></li></ul><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/35.png" alt="35"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const keys &#x3D; object.keys(circle);</span><br><span class="line">console.log(keys)&#96;</span><br></pre></td></tr></table></figure><p>乱入一下，关于Object——property / method的key, value：<br><a href="https://javascript.info/keys-values-entries" target="_blank" rel="noopener">Object</a> 研究了一下，结果还做了一个题，然后一脸懵逼😂我的基础到底是有多差呀</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let user &#x3D; &#123;</span><br><span class="line">  name: “John”,</span><br><span class="line">  age: 30</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>Object.keys(user) = [“name”, “age”]</li><li>Object.values(user) = [“John”, 30]</li><li>Object.entries(user) = [ [“name”,”John”], [“age”,30] ]<br>— 括号里就是所代指的object的名字。好奇怪，为什么不直接用user.keys</li></ul><p>题目就是写一个function（用上for in），计算一个salary对象里面所有用户的salaries总和。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function sumSalaries(salaries)&#123;</span><br><span class="line">for(let value of salaries.values)&#123;</span><br><span class="line">sum+&#x3D;salaries</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let salaries&#x3D;&#123;</span><br><span class="line">&quot;John&quot;:100,</span><br><span class="line">&quot;Pete&quot;:300,</span><br><span class="line">&quot;Mary&quot;:250 &#125;</span><br></pre></td></tr></table></figure><p>正确答案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function sumSalaries(salaries) &#123;</span><br><span class="line"></span><br><span class="line">  let sum &#x3D; 0;</span><br><span class="line">  for (let salary of Object.values(salaries)) &#123;</span><br><span class="line">    sum +&#x3D; salary;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return sum; &#x2F;&#x2F; 650</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let salaries &#x3D; &#123;</span><br><span class="line">  “John”: 100,</span><br><span class="line">  “Pete”: 300,</span><br><span class="line">  “Mary”: 250</span><br><span class="line">&#125;;</span><br><span class="line">alert( sumSalaries(salaries) ); &#x2F;&#x2F; 650</span><br></pre></td></tr></table></figure><p>但我依然觉得object.values(salaries)太麻烦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function sumSalaries()&#123;</span><br><span class="line">let sum&#x3D;0;</span><br><span class="line">for(let salary in salaries.values)&#123;</span><br><span class="line">sum +&#x3D; salary;</span><br><span class="line">&#125;</span><br><span class="line">return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let salaries &#x3D; &#123;</span><br><span class="line">  “John”: 100,</span><br><span class="line">  “Pete”: 300,</span><br><span class="line">  “Mary”: 250</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert( sumSalaries() );</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看OReilly版的JavaScript权威指南，感觉特别累╭(╯3╰)╮然后我在Youtube上找了个视频《Programming with Mosh》，通俗易懂多了。下面是主要是来自视频的学习笔记。&lt;/p&gt;
&lt;h2 id=&quot;4-Pillars-of-Object-ori</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>趣说javascript - construct</title>
    <link href="http://yoursite.com/2019/08/13/%E8%B6%A3%E8%AF%B4javascript%20-%20construct/"/>
    <id>http://yoursite.com/2019/08/13/%E8%B6%A3%E8%AF%B4javascript%20-%20construct/</id>
    <published>2019-08-13T12:46:25.000Z</published>
    <updated>2020-03-18T15:08:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>constructor 是函数的高级形态。为啥高级？因为他的命名可以大写。</p></blockquote><p>说正经的，主要是高级在它本身就是模具（别人家的孩子）。你可以随意照着它的样子，再创造（new)一个对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Wife()&#123;</span><br><span class="line">    this.eyes&#x3D;‘big’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如老婆是一个函数，而且你希望她是个大眼萌妹。</p><p>这时候，照着「老婆」的模板，给你自己造一个老婆，名字叫Ellen 那就直接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const ellen&#x3D;new Wife()</span><br></pre></td></tr></table></figure><p>这个时候的Ellen就是你的理想型大眼老婆。</p><p>以此类比，我们可以造出无数个大眼老婆。</p><p>当然并不是所有人都想要大眼老婆，有些人可能想要丹凤眼。</p><p>那么我们就可以这样，给一个自由选择的参数：eyes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Wife(eyes)&#123;</span><br><span class="line">    this.eyes&#x3D;eyes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创造你心中大（小）眼老婆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Lisa&#x3D;new Wife(&#39;Single-edged eyelid&#39;)</span><br></pre></td></tr></table></figure><p>这时候，你可能要问this是个啥？用语言描述太抽象，我们直接用魔法镜console，把它照出来！</p><ol><li>在construct函数内部console.log(this)</li></ol><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/15845420014828.jpg" alt=""></p><ul><li><p>当你没有创造老婆的时候，你console.log(this)啥反应都没有</p></li><li><p>当你创造了老婆Ellen的时候，你console.log(this)，就会和console.log(ellen)出来的东西一模一样</p></li></ul><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/15845420223950.jpg" alt=""></p><ul><li>当你创造了2个老婆之后，他就会把你创造的2个老婆都整出来。</li></ul><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/15845420326059.jpg" alt=""></p><ol start="2"><li>在construct函数外部console.log(this) this 就变成了windows</li></ol><p>所以this比较像是函数小宇宙环境内部盘点。在全局情况下，就会盘点window环境下的各种对象、方法。在你自己构造的函数内部就会呈现你所创造出的函数。</p><p>回到创造老婆的话题，对老婆的要求不能仅仅是眼睛大，肯定还有别的要求，那就累加参数吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Wife(eyes,legs,skin)&#123;</span><br><span class="line">    this.eyes&#x3D;eyes;</span><br><span class="line">    this.legs&#x3D;legs;</span><br><span class="line">    this.skin&#x3D;skin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以你在创造老婆的时候，需要设定的参数也更多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Lisa&#x3D;new Wife(&#39;Single-edged eyelid&#39;,&#39;long&#39;,&#39;white&#39;)</span><br></pre></td></tr></table></figure><p>当你console.log(Lisa.skin) 时就会得到：</p><p>除此之外还可以加入更复杂的函数来描述你想象中的wife。在此就先不举🌰了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;constructor 是函数的高级形态。为啥高级？因为他的命名可以大写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说正经的，主要是高级在它本身就是模具（别人家的孩子）。你可以随意照着它的样子，再创造（new)一个对象。&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>趣说javascript - loop</title>
    <link href="http://yoursite.com/2019/07/15/%E8%B6%A3%E8%AF%B4javascript%E5%9F%BA%E7%A1%80%20-%20if/"/>
    <id>http://yoursite.com/2019/07/15/%E8%B6%A3%E8%AF%B4javascript%E5%9F%BA%E7%A1%80%20-%20if/</id>
    <published>2019-07-15T06:46:25.000Z</published>
    <updated>2020-03-18T15:08:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>人生没有如果，但爪哇岛（Javascript)一切皆有可能</p></blockquote><p>有一首歌叫if。挺好听的。</p><p>说回正题，随着年岁的变大，人们越来越喜欢用“如果”这几个字来开始追溯一段往事。</p><p>“如果20年前我花300万在北京买个房子，而不是去炒股，那我现在早就是千万甚至亿万富翁了。”</p><p>“如果我当初能够鼓起勇气和晓晓告白，那么我现在的老婆就是晓晓了。“</p><p>仿佛有了”如果“，自己的境遇就会完全不一样似的。</p><p>不过在爪哇斯奎瑞普岛上，倒真的有”如果“，而且只要如果的条件是成立的，那么，结果就有可能实现。</p><p>当你想要指挥爪哇岛上的小精灵为你执行你的财务计划时，你就可以于轻声细语地告诉它们：</p><p>if （老子的钱==100万） { 你就把我的钱放入花旗银行至尊理财宝里 }</p><p>注意啊，这里用了”==“两个等号</p><p>如果是一个“=”等号，那就等于说直接把老子银行账户的钱变成100万，这可是 全世界人都曾想做过的诈骗行为。</p><p>其实呢if 的后面接着就是一个判定符</p><p>在爪哇岛，有这么一些霸王条款：0 代表🙅‍♂️false（一无所有是原罪） null 代表🙅‍♂️false（一无所有是原罪） “ “代表🙅‍♂️false（一无所有是原罪） undefined代表🙅‍♂️false（未知是原罪）</p><p>这里会有个小tips，比如如果你要判断用户是否有id（判定存在），并且输出id的值，但有时候没有id的时候，判断if(id)的话，会显示Reference error，说这个id没有dfined（这里有个奇怪的点，就是如果变量是undefined，那直接会报错啊，并不会判定为false？)。那么这个时候就需要判断一下，此时的id的type是否是undefined的type，注意用！== 且 undefined要用‘‘ ”包起来，因为代表是string。</p><p>NaN代表🙅‍♂️false（未知是原罪）</p><p>刚才讲了“==”，用来判断是否等价，其实还有更严格的“===”，要想通过“===”的判定，那必须是等价+同类型。有种非我族人，哪怕家财万贯，我也不许通过的赶脚！！（===就是爪哇岛上的民粹主义哼）</p><p>当然不一定非得是判定它们等价，如果是在把第一个”=“换成”！“（惊叹，竟然不是等价），也就是”！=“那就是判断它们是否不等价。</p><p>民粹主义者中也有判断非我族类的，同样也是把第一个”=“换成”！“，也就是”！==“那就是判断它们是否”不等价也非我族类”。</p><p>if 族群里比较难的是ternary operator，也就是简化版的if else。正常情况下做判断就是： if() { } else{ } 但是呢，爪哇岛上的人觉得太麻烦了 于是就发明了一个三元运算符，不要if，也不要else。直接把条件摆上 我如果和肖战是朋友？（这就是一个条件，但是并不知道这个条件是否成立，那就打个问号呗）</p><p>我如果和肖战是朋友？喊他出来吃小龙虾（紧跟着后面的第一句话，就是假如条件为真，会发生什么。）</p><p>我如果和肖战是朋友？喊他出来吃小龙虾：只好继续刷《陈情令》（但是但是，这里用：来代表现实，表示条件并不成立的情况）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;人生没有如果，但爪哇岛（Javascript)一切皆有可能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有一首歌叫if。挺好听的。&lt;/p&gt;
&lt;p&gt;说回正题，随着年岁的变大，人们越来越喜欢用“如果”这几个字来开始追溯一段往事。&lt;/p&gt;
&lt;p&gt;“如果20</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>趣说javascript - function</title>
    <link href="http://yoursite.com/2019/06/25/%E8%B6%A3%E8%AF%B4javascript%20%E5%9F%BA%E7%A1%80%20-%20%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/06/25/%E8%B6%A3%E8%AF%B4javascript%20%E5%9F%BA%E7%A1%80%20-%20%E5%87%BD%E6%95%B0/</id>
    <published>2019-06-25T12:46:25.000Z</published>
    <updated>2020-03-18T15:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>函数有了，现在就只差“对象”了。</p></blockquote><p>今天来讲每一个代码英雄都必须拥有的基本装备：函数。</p><p>函数就像你的微型智能设备（比小爱还好使），简单，快捷。你把你想要执行的动作写在函数里，仅仅呼叫她的名字，它就自动完成你想要实现的动作。</p><p>当然鉴于在不同情况下呼叫她，所需要的某些指令是不同的，这个时候就需要一个参数。</p><p>参数就是一个小盒子，你需要发布什么特别的指令，你就把指令放进小盒子里。</p><p>这个小盒子必须要和整个要执行的动作有关，不然！你！整个盒子干啥！</p><p>一个函数可以有好几个小盒子。你可以在呼叫她的时候 告诉她这时候盒子里应该有啥。</p><p>如果你怕自己时候忘记在盒子里放指令，可提前设定一个默认指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function great(firstName&#x3D;&quot;Joe&quot;, lastName&#x3D;&quot;Doe&quot;)&#123;</span><br><span class="line">    return &#39;hello &#39;+firstName+&#39;&#39;+lastName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以直接定义变量为一个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const niubi &#x3D; function()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有的时候，你可能更加心急，想在造函数的同时也使用它。你就可以这样直接在function外面加个括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（function()&#123;&#125;)();</span><br></pre></td></tr></table></figure><p>瞧瞧上面这么多括号。最后一个括号必不可少，就是呼叫函数之后要把那个传参数的小盒子给到她，你没得装，你也得写上去～</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（function(name)&#123;</span><br><span class="line">    console.log(&#39;Hello&#39;+ name);</span><br><span class="line">&#125;)(&#39;Brad&#39;);</span><br></pre></td></tr></table></figure><p>如果你要有很多很多步骤想做的动作都包含在一个事件里。那么不如就把这个事件搞成你的对象（这话听着賊奇怪？？）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const 你的对象 &#x3D; &#123;</span><br><span class="line">    给我做饭: function(今日菜谱)&#123;</span><br><span class="line">         xxxxxx $&#123;今日菜谱&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候如果你想要告诉（命令）你的对象，给我做顿饭。那么只需要发出：</p><p>你的对象.给我做饭(‘红烧牛腩’)指令</p><p>即可</p><p>当然如果你临时想起一件事想要你对象做，那也很简单，无需回到原先declare变量的地方，原地定义一个指令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你的对象.陪我逛街&#x3D;function()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;函数有了，现在就只差“对象”了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天来讲每一个代码英雄都必须拥有的基本装备：函数。&lt;/p&gt;
&lt;p&gt;函数就像你的微型智能设备（比小爱还好使），简单，快捷。你把你想要执行的动作写在函数里，仅仅呼叫她的名字，它</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>趣说javascript - loop</title>
    <link href="http://yoursite.com/2019/05/09/%E8%B6%A3%E8%AF%B4javascript%20-%20loop/"/>
    <id>http://yoursite.com/2019/05/09/%E8%B6%A3%E8%AF%B4javascript%20-%20loop/</id>
    <published>2019-05-09T06:46:25.000Z</published>
    <updated>2020-03-18T15:05:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>把我的男朋友们loop一下，会怎么样？</p></blockquote><p>上帝说：要有光。于是🌞每天就当空照，鸟儿每天也对我笑。</p><p>上帝说：要Loop循环（🤦‍♂️剧情需要），于是人类历史就不断的循环往复。</p><p>上帝手下有4个天使，职责都一样：负责维护“循环（Loop）”。（瞧瞧天庭的官僚体制多么冗杂）</p><p>其中一个👼天使叫For。他手下的兄弟不多，就一个计数君，负责计数，且只存在于他的官府中。外面的事儿，他完全不掺合！</p><p>计数君忠心耿耿地守候着每一次循环，从开头到结尾，差不多就和⬇️一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(let 计数君&#x3D;0；计数君 &lt; 最多循环的次数；计数君++）&#123;</span><br><span class="line">    天使大人希望循环的内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个循环👼叫whie。他手下也是只有一个计数君。不过他手下的计数君要悠闲很多了，只需要打理一下循环次数就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(i &lt; 最多循环的次数）&#123;</span><br><span class="line">    天使大人希望循环到天荒地老的内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而和while师出同门，但后来自成一家的👼叫do while. 手下同样有一个计数君，但他手下的计数君比较懒散，管理不是很严格。无论是是否符合循环条件，他都至少让你循环一次……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let i&#x3D;0;</span><br><span class="line">do&#123;</span><br><span class="line">天使大人希望循环的内容，先循环一下试试</span><br><span class="line">&#125;</span><br><span class="line">while(i&gt;3)</span><br></pre></td></tr></table></figure><p>对了，不得不提到一个叫forEach的侠客，属于函数（方法）部门，虽说不完全属于循环部门，但有一技之长，擅长遍历Array。</p><p>正常情况下，你想列队展示自己最爱的动漫人物男朋友。比如 const 魔道祖师=[ “魏无羡”，”蓝湛“，”江澄“，”晓星尘”]，就要经历这样的局面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(let i&#x3D;0;i&lt;魔道祖师.length;i++)&#123;</span><br><span class="line">    console.log(魔道祖师[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来很冗长对不对，如果交给for each来办事儿，那就是下面👇这种局面，除了需要内嵌一个function其他都还挺简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">魔道祖师.forEach(function(boyfriend)&#123;</span><br><span class="line">console.log(boyfriend)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>额 其实也很冗杂。好吧，估计在未来会比较方便？</p><p>另一个侠客叫for in 擅长循环object。比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const 对象一天做的饭&#x3D;&#123;</span><br><span class="line">breakfast:&#39;三鲜豆皮&#39;,</span><br><span class="line">lunch:&#39;油焖大虾&#39;,</span><br><span class="line">dinner:&#39;牛肉面&#39;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(let menu in everydayMeal)&#123;</span><br><span class="line">    console.log(everydayMeal[menu])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这位侠客的工作方式最好理解，就是把对象一天做的饭里的每一顿挑出来便ok了。</p><p>let x in y 中的x可以自己取名字的很爽。</p><p>最后循环部门还有一个小👼叫map。他比较独特，虽然工作方式和forEach很像，但是他不仅仅循环array，他还能把最后循环出来的结果放进自己新创的array里（咋说呢，有点像现在自媒体洗稿，换汤不换药）</p><p>比如我最近在看下面这几部动漫，但是我突然不想要id了，想要一个只有动漫名字的array。这时候map就上场了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const anime&#x3D;[</span><br><span class="line">&#123;id:1,name:&quot;石纪元&quot;&#125;,</span><br><span class="line">&#123;id:2,name:&quot;西行纪&quot;&#125;,</span><br><span class="line">&#123;id:3,name:&quot;洁癖男子青山君&quot;&#125;,</span><br><span class="line">&#123;id:4,name:&quot;关于我转变成史莱姆这档事&quot;&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const onlyanimeName&#x3D;anime.map(function(one)&#123;</span><br><span class="line">return one.name&#125;)</span><br><span class="line"></span><br><span class="line">console.log(onlyanimeName)</span><br></pre></td></tr></table></figure><p>于是，新的 array 就粗线了！</p><p>以上差不多就是和循环部门有关的全部👼。</p><p>然鹅，上帝老爷还是不放心这些小天使👼于是就安插了2个直属心腹。一个叫continue，一个叫break。</p><p>这俩是能粗暴干预循环的。就拿continue来说，continue有权命令循环部门跳过某一次循环要做的事情。</p><p>比如对于👇下面这个循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const 魔道祖师&#x3D;[ “魏无羡”，”蓝湛“，”江澄“，”晓星尘”]</span><br><span class="line">for(let i&#x3D;0;i&lt;魔道祖师.length;i++)&#123;</span><br><span class="line">    console.log(魔道祖师[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上帝老爷说，我贼拉讨厌江澄，请不要让他出现在我的console里好咩？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const 魔道祖师&#x3D;[ “魏无羡”，”蓝湛“，”江澄“，”晓星尘”]</span><br><span class="line">for(let i&#x3D;0;i&lt;魔道祖师.length;i++)&#123;</span><br><span class="line">    if(魔道祖师[i]&#x3D;&#x3D;“江澄”)&#123;</span><br><span class="line">   continue&#125;</span><br><span class="line">    console.log(魔道祖师[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是乎，到了江澄这里，本循环就终结，也就是不再往下走经过console.log而是直接进入到下一循环。是不是很腻害？？？</p><p>上帝老师又说，不好意思，到了蓝湛这里，我就希望循环停止ok？这时候一直在工作里划水的break不得不出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const 魔道祖师&#x3D;[ “魏无羡”，”蓝湛“，”江澄“，”晓星尘”]</span><br><span class="line">for(let i&#x3D;0;i&lt;魔道祖师.length;i++)&#123;</span><br><span class="line">    if(魔道祖师[i]&#x3D;&#x3D;“蓝湛”)&#123;</span><br><span class="line">   break&#125;</span><br><span class="line">    console.log(魔道祖师[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是，可怜的蓝湛还没console.log出来，循环就停止了……</p><p>啊，终于把loop部门介绍完了。累死俺了～不过我那几位来自魔道祖师的蓝朋友们都还不错吧哈哈哈哈</p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/15845422309461.jpg" alt=""></p><p><img src="https://blog-1258441037.cos.ap-chengdu.myqcloud.com/2020/03/18/15845422398730.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;把我的男朋友们loop一下，会怎么样？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上帝说：要有光。于是🌞每天就当空照，鸟儿每天也对我笑。&lt;/p&gt;
&lt;p&gt;上帝说：要Loop循环（🤦‍♂️剧情需要），于是人类历史就不断的循环往复。&lt;/p&gt;
&lt;p&gt;上</summary>
      
    
    
    
    
  </entry>
  
</feed>
